<!-- Item Selection Modal -->
<div class="modal fade" id="itemSelectionModal" tabindex="-1" role="dialog" aria-labelledby="itemSelectionModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="itemSelectionModalLabel">
                    <i class="fas fa-search mr-2"></i>Select Item
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- Search and Filter Controls -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                            </div>
                            <input type="text" id="itemSearchInput" class="form-control"
                                placeholder="Search by code, name, or barcode...">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <select id="categoryFilter" class="form-control">
                            <option value="">All Categories</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <select id="typeFilter" class="form-control">
                            <option value="item">Items</option>
                            <option value="service">Services</option>
                        </select>
                    </div>
                </div>

                <!-- Recent Items Section -->
                <div id="recentItemsSection" class="mb-3" style="display: none;">
                    <h6><i class="fas fa-clock mr-1"></i>Recent Items</h6>
                    <div id="recentItems" class="row"></div>
                    <hr>
                </div>

                <!-- Favorites Section -->
                <div id="favoritesSection" class="mb-3" style="display: none;">
                    <h6><i class="fas fa-star mr-1"></i>Favorite Items</h6>
                    <div id="favoriteItems" class="row"></div>
                    <hr>
                </div>

                <!-- Items List -->
                <div class="table-responsive" style="max-height: 400px;">
                    <table class="table table-hover table-sm">
                        <thead class="thead-light sticky-top">
                            <tr>
                                <th width="15%">Code</th>
                                <th width="35%">Name</th>
                                <th width="15%">Barcode</th>
                                <th width="10%">Unit</th>
                                <th width="10%">Stock</th>
                                <th width="10%">Price</th>
                                <th width="5%">Action</th>
                            </tr>
                        </thead>
                        <tbody id="itemsTableBody">
                            <tr>
                                <td colspan="7" class="text-center text-muted">
                                    <i class="fas fa-spinner fa-spin mr-2"></i>Loading items...
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                <nav aria-label="Items pagination" class="mt-3">
                    <ul id="itemsPagination" class="pagination pagination-sm justify-content-center">
                        <!-- Pagination will be generated by JavaScript -->
                    </ul>
                </nav>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">
                    <i class="fas fa-times mr-1"></i>Cancel
                </button>
                <div class="text-muted small">
                    <i class="fas fa-info-circle mr-1"></i>
                    Use search to quickly find items by code, name, or barcode
                </div>
            </div>
        </div>
    </div>
</div>

@push('scripts')
    <!-- Item Selection JavaScript -->
    <script>
        $(document).ready(function() {
            class ItemSelector {
                constructor() {
                    this.currentPage = 1;
                    this.perPage = 20;
                    this.searchQuery = '';
                    this.categoryId = '';
                    this.type = 'item';
                    this.selectedItem = null;
                    this.callback = null;

                    this.init();
                }

                init() {
                    this.loadCategories();
                    this.bindEvents();
                    this.loadItems();
                }

                bindEvents() {
                    // Search input with debounce
                    let searchTimeout;
                    $('#itemSearchInput').on('input', (e) => {
                        clearTimeout(searchTimeout);
                        searchTimeout = setTimeout(() => {
                            this.searchQuery = e.target.value;
                            this.currentPage = 1;
                            this.loadItems();
                        }, 300);
                    });

                    // Category filter
                    $('#categoryFilter').on('change', (e) => {
                        this.categoryId = e.target.value;
                        this.currentPage = 1;
                        this.loadItems();
                    });

                    // Type filter
                    $('#typeFilter').on('change', (e) => {
                        this.type = e.target.value;
                        this.currentPage = 1;
                        this.loadItems();
                    });

                    // Item selection
                    $(document).on('click', '.select-item-btn', (e) => {
                        const itemId = $(e.target).data('item-id');
                        this.selectItem(itemId);
                    });
                }

                async loadCategories() {
                    try {
                        const response = await fetch('/api/items/categories');
                        const categories = await response.json();

                        const select = $('#categoryFilter');
                        select.empty().append('<option value="">All Categories</option>');

                        categories.forEach(category => {
                            select.append(`<option value="${category.id}">${category.name}</option>`);
                        });
                    } catch (error) {
                        console.error('Error loading categories:', error);
                    }
                }

                async loadItems() {
                    try {
                        const params = new URLSearchParams({
                            q: this.searchQuery,
                            category_id: this.categoryId,
                            type: this.type,
                            page: this.currentPage,
                            per_page: this.perPage
                        });

                        const response = await fetch(`/api/items/search?${params}`);
                        const data = await response.json();

                        this.renderItems(data.data);
                        this.renderPagination(data.pagination);

                        // Load recent items if no search query
                        if (!this.searchQuery) {
                            this.loadRecentItems();
                            this.loadFavoriteItems();
                        }
                    } catch (error) {
                        console.error('Error loading items:', error);
                        this.showError('Failed to load items');
                    }
                }

                async loadRecentItems() {
                    try {
                        const response = await fetch('/api/items/recent?limit=6');
                        const items = await response.json();

                        if (items.length > 0) {
                            this.renderRecentItems(items);
                            $('#recentItemsSection').show();
                        } else {
                            $('#recentItemsSection').hide();
                        }
                    } catch (error) {
                        console.error('Error loading recent items:', error);
                    }
                }

                async loadFavoriteItems() {
                    try {
                        const response = await fetch('/api/items/favorites?limit=6');
                        const items = await response.json();

                        if (items.length > 0) {
                            this.renderFavoriteItems(items);
                            $('#favoritesSection').show();
                        } else {
                            $('#favoritesSection').hide();
                        }
                    } catch (error) {
                        console.error('Error loading favorite items:', error);
                    }
                }

                renderItems(items) {
                    const tbody = $('#itemsTableBody');
                    tbody.empty();

                    if (items.length === 0) {
                        tbody.append(`
                    <tr>
                        <td colspan="7" class="text-center text-muted">
                            <i class="fas fa-search mr-2"></i>No items found
                        </td>
                    </tr>
                `);
                        return;
                    }

                    items.forEach(item => {
                        const stockQty = item.current_stock_quantity || 0;
                        const price = item.last_cost_price || 0;

                        tbody.append(`
                    <tr>
                        <td><strong>${item.code}</strong></td>
                        <td>${item.name}</td>
                        <td>${item.barcode || '-'}</td>
                        <td>${item.unit_of_measure}</td>
                        <td class="text-right">${stockQty.toLocaleString()}</td>
                        <td class="text-right">${price.toLocaleString()}</td>
                        <td class="text-center">
                            <button class="btn btn-sm btn-primary select-item-btn" 
                                    data-item-id="${item.id}"
                                    title="Select this item">
                                <i class="fas fa-check"></i>
                            </button>
                        </td>
                    </tr>
                `);
                    });
                }

                renderRecentItems(items) {
                    const container = $('#recentItems');
                    container.empty();

                    items.forEach(item => {
                        container.append(`
                    <div class="col-md-4 mb-2">
                        <div class="card card-sm">
                            <div class="card-body p-2">
                                <h6 class="card-title mb-1">${item.code}</h6>
                                <p class="card-text small mb-1">${item.name}</p>
                                <button class="btn btn-xs btn-outline-primary select-item-btn" 
                                        data-item-id="${item.id}">
                                    Select
                                </button>
                            </div>
                        </div>
                    </div>
                `);
                    });
                }

                renderFavoriteItems(items) {
                    const container = $('#favoriteItems');
                    container.empty();

                    items.forEach(item => {
                        container.append(`
                    <div class="col-md-4 mb-2">
                        <div class="card card-sm">
                            <div class="card-body p-2">
                                <h6 class="card-title mb-1">${item.code}</h6>
                                <p class="card-text small mb-1">${item.name}</p>
                                <small class="text-muted">Used ${item.usage_count} times</small>
                                <button class="btn btn-xs btn-outline-primary select-item-btn d-block w-100 mt-1" 
                                        data-item-id="${item.id}">
                                    Select
                                </button>
                            </div>
                        </div>
                    </div>
                `);
                    });
                }

                renderPagination(pagination) {
                    const paginationEl = $('#itemsPagination');
                    paginationEl.empty();

                    if (pagination.last_page <= 1) return;

                    // Previous button
                    const prevDisabled = pagination.current_page === 1 ? 'disabled' : '';
                    paginationEl.append(`
                <li class="page-item ${prevDisabled}">
                    <a class="page-link" href="#" data-page="${pagination.current_page - 1}">
                        <i class="fas fa-chevron-left"></i>
                    </a>
                </li>
            `);

                    // Page numbers
                    const startPage = Math.max(1, pagination.current_page - 2);
                    const endPage = Math.min(pagination.last_page, pagination.current_page + 2);

                    for (let i = startPage; i <= endPage; i++) {
                        const active = i === pagination.current_page ? 'active' : '';
                        paginationEl.append(`
                    <li class="page-item ${active}">
                        <a class="page-link" href="#" data-page="${i}">${i}</a>
                    </li>
                `);
                    }

                    // Next button
                    const nextDisabled = pagination.current_page === pagination.last_page ? 'disabled' : '';
                    paginationEl.append(`
                <li class="page-item ${nextDisabled}">
                    <a class="page-link" href="#" data-page="${pagination.current_page + 1}">
                        <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
            `);

                    // Pagination click handler
                    paginationEl.find('.page-link').on('click', (e) => {
                        e.preventDefault();
                        const page = parseInt($(e.target).data('page'));
                        if (page && page !== this.currentPage) {
                            this.currentPage = page;
                            this.loadItems();
                        }
                    });
                }

                async selectItem(itemId) {
                    try {
                        // Track item selection
                        await fetch('/api/items/track', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')
                                    .getAttribute('content')
                            },
                            body: JSON.stringify({
                                item_id: itemId
                            })
                        });

                        const response = await fetch(`/api/items/${itemId}`);
                        const item = await response.json();

                        this.selectedItem = item;

                        if (this.callback) {
                            this.callback(item);
                        }

                        $('#itemSelectionModal').modal('hide');
                    } catch (error) {
                        console.error('Error selecting item:', error);
                        this.showError('Failed to select item');
                    }
                }

                showError(message) {
                    $('#itemsTableBody').html(`
                <tr>
                    <td colspan="7" class="text-center text-danger">
                        <i class="fas fa-exclamation-triangle mr-2"></i>${message}
                    </td>
                </tr>
            `);
                }

                // Public method to open modal
                open(callback) {
                    this.callback = callback;
                    this.searchQuery = '';
                    this.categoryId = '';
                    this.currentPage = 1;
                    $('#itemSearchInput').val('');
                    $('#categoryFilter').val('');
                    $('#typeFilter').val('item');
                    $('#itemSelectionModal').modal('show');
                    this.loadItems();
                }
            }

            // Initialize global item selector
            window.itemSelector = new ItemSelector();
        });
    </script>
@endpush
